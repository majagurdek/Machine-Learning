# -*- coding: utf-8 -*-
"""lab6.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ejLK9d0RQLVjHs2YOd5WHgrwmxfMs9Aw
"""

import numpy as np
import pandas as pd

from sklearn import datasets
data_breast_cancer = datasets.load_breast_cancer(as_frame=True)
X_bc = data_breast_cancer["data"][["mean texture", "mean symmetry"]]
y_bc = data_breast_cancer["target"]

X_bc

y_bc

from sklearn.model_selection import train_test_split
X_bc_train, X_bc_test, y_bc_train, y_bc_test = train_test_split(X_bc, y_bc, test_size=0.2)

#budowanie ensembli

from sklearn.ensemble import VotingClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.neighbors import KNeighborsClassifier

tree_clf = DecisionTreeClassifier()
log_clf = LogisticRegression(solver="lbfgs")
knn_clf = KNeighborsClassifier()

voting_clf_hard = VotingClassifier(
    estimators=[('dt', tree_clf),
                ('lr', log_clf),
                ('kn', knn_clf)],
    voting='hard')
voting_clf_hard.fit(X_bc_train, y_bc_train)

voting_clf_soft = VotingClassifier(
    estimators=[('dt', tree_clf),
                ('lr', log_clf),
                ('kn', knn_clf)],
    voting='soft')
voting_clf_soft.fit(X_bc_train, y_bc_train)

#accuracy

from sklearn.metrics import accuracy_score

#zapisac jako liste par train, test

list1 = []
list2 = []

for clf in (tree_clf, log_clf, knn_clf, voting_clf_hard, voting_clf_soft):
    clf.fit(X_bc_train, y_bc_train)
    list2.append(clf)
    y_pred_train = clf.predict(X_bc_train)
    y_pred_test = clf.predict(X_bc_test)
    print(clf.__class__.__name__,accuracy_score(y_bc_train, y_pred_train), clf.__class__.__name__,
          accuracy_score(y_bc_test, y_pred_test))
    list1.append((accuracy_score(y_bc_train, y_pred_train), accuracy_score(y_bc_test, y_pred_test)))

list1

import pickle

with open('acc_vote.pkl', 'wb') as f:
    pickle.dump(list1, f, pickle.HIGHEST_PROTOCOL)

with open('acc_vote.pkl', 'rb') as f:
    print(pickle.load(f))

list2

with open('vote.pkl', 'wb') as f:
    pickle.dump(list2, f, pickle.HIGHEST_PROTOCOL)

with open('vote.pkl', 'rb') as f:
    print(pickle.load(f))

#bagging, pasting itp

from sklearn.ensemble import BaggingClassifier
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import cross_val_score
from sklearn.ensemble import AdaBoostClassifier
from sklearn.ensemble import GradientBoostingClassifier

bag_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30,max_samples=1.0, bootstrap=True)
bag_clf_half = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30,max_samples=0.5, bootstrap=True)
pas_clf = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30,max_samples=1.0, bootstrap=False)
pas_clf_half = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30,max_samples=0.5, bootstrap=False)
rnd_clf = RandomForestClassifier(n_estimators=30)
ada_clf = AdaBoostClassifier(n_estimators=30)
gb_clf = GradientBoostingClassifier(n_estimators=30)

#accuracy

from sklearn.metrics import accuracy_score

acc_bag = []
bag = []

for clf in (bag_clf, bag_clf_half, pas_clf, pas_clf_half, rnd_clf, ada_clf, gb_clf):
  clf.fit(X_bc_train, y_bc_train)
  bag.append(clf)
  acc_bag.append((
        accuracy_score(y_bc_train, clf.predict(X_bc_train)),
        accuracy_score(y_bc_test, clf.predict(X_bc_test))
    ))

acc_bag

with open('acc_bag.pkl', 'wb') as f:
    pickle.dump(acc_bag, f, pickle.HIGHEST_PROTOCOL)

with open('acc_bag.pkl', 'rb') as f:
    print(pickle.load(f))

bag

with open('bag.pkl', 'wb') as f:
    pickle.dump(bag, f, pickle.HIGHEST_PROTOCOL)

with open('bag.pkl', 'rb') as f:
    print(pickle.load(f))

#sampling cech

X = data_breast_cancer["data"]
y = data_breast_cancer["target"]

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

acc_fea = []
fea = []

smpl = BaggingClassifier(DecisionTreeClassifier(), n_estimators=30, max_features=2,  max_samples=0.5, bootstrap_features=False, bootstrap = True)

smpl.fit(X_train, y_train)
fea.append(smpl)

acc_fea.append((
        accuracy_score(y_train, smpl.predict(X_train)),
        accuracy_score(y_test, smpl.predict(X_test))))

acc_fea

with open('acc_fea.pkl', 'wb') as f:
    pickle.dump(acc_fea, f, pickle.HIGHEST_PROTOCOL)

with open('acc_fea.pkl', 'rb') as f:
    print(pickle.load(f))

with open('fea.pkl', 'wb') as f:
    pickle.dump(fea, f, pickle.HIGHEST_PROTOCOL)

with open('fea.pkl', 'rb') as f:
    print(pickle.load(f))

#data frame

data = []

for estimator, features in zip(smpl.estimators_, smpl.estimators_features_):
  y_pred_train2 = estimator.predict(X_train.iloc[:, features])
  y_pred_test2 = estimator.predict(X_test.iloc[:, features])
  data.append([accuracy_score(y_train, y_pred_train2), accuracy_score(y_test, y_pred_test2), list(X.columns[features])])

acc_fea_rank = pd.DataFrame(data, columns = ["Train Accuracy", "Test Accuracy", "Features"])

acc_fea_rank.sort_values(by=['Test Accuracy', 'Train Accuracy'], ascending=False, inplace=True)

acc_fea_rank

with open('acc_fea_rank.pkl', 'wb') as f:
    pickle.dump(acc_fea_rank, f, pickle.HIGHEST_PROTOCOL)

with open('acc_fea_rank.pkl', 'rb') as f:
    print(pickle.load(f))

