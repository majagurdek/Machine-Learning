# -*- coding: utf-8 -*-
"""lab7.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hBMxa_Zy-mNw5mW6swn3ft7eXpflkxh7
"""

import pandas as pd
import numpy as np
from sklearn.datasets import fetch_openml

mnist = fetch_openml('mnist_784', version=1, as_frame=False) 
mnist.target = mnist.target.astype(np.uint8)
X = mnist["data"]
y = mnist["target"]

#klasteryzacja

from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score

kmeans_sil = []

kmeans8 = KMeans(n_clusters=8).fit(X)
kmeans_sil.append(silhouette_score(X, kmeans8.labels_))

kmeans9 = KMeans(n_clusters=9).fit(X)
kmeans_sil.append(silhouette_score(X, kmeans9.labels_))

kmeans10 = KMeans(n_clusters=10).fit(X)
kmeans_sil.append(silhouette_score(X, kmeans10.labels_))

kmeans11 = KMeans(n_clusters=11).fit(X)
kmeans_sil.append(silhouette_score(X, kmeans11.labels_))

kmeans12 = KMeans(n_clusters=12).fit(X)
kmeans_sil.append(silhouette_score(X, kmeans12.labels_))

import pickle

with open('kmeans_sil.pkl', 'wb') as f:
    pickle.dump(kmeans_sil, f, pickle.HIGHEST_PROTOCOL)

with open('kmeans_sil.pkl', 'rb') as f:
    print(pickle.load(f))

#macierz bledow

from sklearn.metrics import confusion_matrix
matrix = confusion_matrix(y, kmeans10.predict(X))
matrix

ind = np.argmax(matrix, axis=-1)
ind

ind2 = np.unique(ind)
ind2

with open('kmeans_argmax.pkl', 'wb') as f:
    pickle.dump(ind2, f, pickle.HIGHEST_PROTOCOL)

with open('kmeans_argmax.pkl', 'rb') as f:
    print(pickle.load(f))

#DBSCAN

dist = []

for i in range(300):
    for j in X:
        if not ((X[i]==j).all()): 
          dist.append(np.linalg.norm(X[i] - j))

dist_s = np.unique(dist)[:10]
dist_s

with open('dist.pkl', 'wb') as f:
    pickle.dump(dist_s, f, pickle.HIGHEST_PROTOCOL)

with open('dist.pkl', 'rb') as f:
    print(pickle.load(f))

s  = (dist_s[0]+dist_s[1]+dist_s[2])/3
s

from sklearn.cluster import DBSCAN
db_len = []

# dbscan1 = DBSCAN(eps=s)
# dbscan1.fit(X)
# db_len.append(len(set(dbscan1.labels_)))

# dbscan2 = DBSCAN(eps=1.04*s)
# dbscan2.fit(X)
# db_len.append(len(set(dbscan2.labels_)))

# dbscan3 = DBSCAN(eps=1.08*s)
# dbscan3.fit(X)
# db_len.append(len(set(dbscan3.labels_)))

for i in (s, 1.04*s, 1.08*s):
   dbscan = DBSCAN(eps=i)
   dbscan.fit(X)
   db_len.append(len(set(dbscan.labels_)))

with open('dbscan_len.pkl', 'wb') as f:
    pickle.dump(db_len, f, pickle.HIGHEST_PROTOCOL)

with open('dbscan_len.pkl', 'rb') as f:
    print(pickle.load(f))

