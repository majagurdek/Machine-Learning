# -*- coding: utf-8 -*-
"""lab11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11UhaFrWNiH_Op1uhStlQm5MaJI8PoX2c
"""

import numpy as np
import pandas as pd
import tensorflow as tf
from tensorflow import keras

(X_train, y_train), (X_test, y_test) = tf.keras.datasets.boston_housing.load_data()

def build_model(n_hidden, n_neurons, optimizer, learning_rate, momentum=0): 
    model = tf.keras.models.Sequential()
    model.add(keras.layers.InputLayer(input_shape=X_train.shape[1:]))
    for layer in range(n_hidden):
        model.add(keras.layers.Dense(n_neurons, activation="relu"))
    model.add(keras.layers.Dense(1))    
    if optimizer =="sgd":
        optimizer = keras.optimizers.SGD(learning_rate=learning_rate)
       
    elif optimizer == "nesterov":
        optimizer = keras.optimizers.SGD(learning_rate=learning_rate, nesterov=True)
        
    elif optimizer == "momentum":
        optimizer = keras.optimizers.SGD(learning_rate=learning_rate, momentum = momentum)
        
    elif optimizer == "adam":
        optimizer = keras.optimizers.Adam(learning_rate=learning_rate)
        
    model.compile(loss="mse", optimizer=optimizer,metrics = [tf.keras.metrics.mean_absolute_error])
   
    return model

#model = build_model(1, 25, "sgd", 10**(-5))

import os
root_logdir = os.path.join(os.curdir, "tb_logs")
def get_run_logdir(name, value): 
  import time
  ts = int(time.time())
  run_id = f"{ts}_{name}_{value}"
  return os.path.join(root_logdir, run_id)

tf.keras.backend.clear_session()
np.random.seed(42)
tf.random.set_seed(42)

es = tf.keras.callbacks.EarlyStopping(patience=10, min_delta=1.00)

import pickle

lista = []
lr = [10**(-6), 10**(-5), 10**(-4)]
name = 'lr'
for value in lr :
    model1 = build_model(1, 25, "sgd", value)
    tensorboard_cb = tf.keras.callbacks.TensorBoard(get_run_logdir(name, value))
    history = model1.fit(X_train, y_train, epochs=100, callbacks=[tensorboard_cb, es])
    sc = model1.evaluate(X_test, y_test)
    lista.append((value, sc[0], sc[1]))

lista

with open('lr.pkl', 'wb') as f:
    pickle.dump(lista, f, pickle.HIGHEST_PROTOCOL)

with open('lr.pkl', 'rb') as f:
    print(pickle.load(f))

lista2 = []
hl = [0, 1, 2 , 3]
name = 'hl'
for value in hl :
    model2 = build_model(value, 25, "sgd", 10**(-5) )
    tensorboard_cb = tf.keras.callbacks.TensorBoard(get_run_logdir(name, value))
    history = model2.fit(X_train, y_train, epochs=100, callbacks=[tensorboard_cb, es])
    sc = model2.evaluate(X_test, y_test)
    lista2.append((value, sc[0], sc[1]))

lista2

with open('hl.pkl', 'wb') as f:
    pickle.dump(lista2, f, pickle.HIGHEST_PROTOCOL)

with open('hl.pkl', 'rb') as f:
    print(pickle.load(f))

lista3 = []
nn = [5, 25, 125]
name = 'nn'
for value in nn :
    model3 = build_model(1, value, "sgd", 10**(-5) )
    tensorboard_cb = tf.keras.callbacks.TensorBoard(get_run_logdir(name, value))
    history = model3.fit(X_train, y_train, epochs=100, callbacks=[tensorboard_cb, es])
    sc = model3.evaluate(X_test, y_test)
    lista3.append((value, sc[0], sc[1]))

lista3

with open('nn.pkl', 'wb') as f:
    pickle.dump(lista3, f, pickle.HIGHEST_PROTOCOL)

with open('nn.pkl', 'rb') as f:
    print(pickle.load(f))

lista4 = []
opt = ["sgd", "nesterov", "momentum", "adam"]
name = 'opt'
for value in opt :
    model4 = build_model(1, 25, value, 10**(-5), 0.5)
    tensorboard_cb = tf.keras.callbacks.TensorBoard(get_run_logdir(name, value))
    history = model4.fit(X_train, y_train, epochs=100, callbacks=[tensorboard_cb, es])
    sc = model4.evaluate(X_test, y_test)
    lista4.append((value, sc[0], sc[1]))

lista4

with open('opt.pkl', 'wb') as f:
    pickle.dump(lista4, f, pickle.HIGHEST_PROTOCOL)

with open('opt.pkl', 'rb') as f:
    print(pickle.load(f))

lista5 = []
mom = [0.1, 0.5, 0.9]
name = 'mom'
for value in mom :
    model5 = build_model(1, 25, "momentum", 10**(-5), value)
    tensorboard_cb = tf.keras.callbacks.TensorBoard(get_run_logdir(name, value))
    history = model5.fit(X_train, y_train, epochs=100, callbacks=[tensorboard_cb, es])
    sc = model5.evaluate(X_test, y_test)
    lista5.append((value, sc[0], sc[1]))

lista5

with open('mom.pkl', 'wb') as f:
    pickle.dump(lista5, f, pickle.HIGHEST_PROTOCOL)

with open('mom.pkl', 'rb') as f:
    print(pickle.load(f))

#Automatyczne przeszukiwanie przestrzeni hiperparametr√≥w

!pip install scikeras

param_distribs = {
"model__n_hidden": [0,1,2,3],
"model__n_neurons": [5,25,125],
"model__learning_rate": [10**(-6), 10**(-5), 10**(-4)],
"model__optimizer": ["sgd", "nesterov", "momentum", "adam"],
"model__momentum": [0.1, 0.5, 0.9]
}

import scikeras
from scikeras.wrappers import KerasRegressor
es = tf.keras.callbacks.EarlyStopping(patience=10, min_delta=1.0, verbose=1)
keras_reg = KerasRegressor(build_model, callbacks=[es])

from sklearn.model_selection import RandomizedSearchCV
rnd_search_cv = RandomizedSearchCV(keras_reg,param_distribs,n_iter=10,cv=3,verbose=2)
rnd_search_cv.fit(X_train, y_train, epochs=100, validation_split=0.1, callbacks=[es])

result = rnd_search_cv.best_params_

with open('rnd_search.pkl', 'wb') as f:
    pickle.dump(result, f, pickle.HIGHEST_PROTOCOL)

with open('rnd_search.pkl', 'rb') as f:
    print(pickle.load(f))

